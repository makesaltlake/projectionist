const admin = require('firebase-admin');
const functions = require('firebase-functions');

// credentials.service_account is the base64 encoded JSON service credential file generated by the firebase console.
// It's needed for auth.createCustomToken() to work.
const serviceAccountCredentialData = functions.config().credentials.service_account;
const serviceAccountCredentialJSON = JSON.parse(new Buffer(serviceAccountCredentialData, 'base64').toString('ascii'));

admin.initializeApp({
  credential: admin.credential.cert(serviceAccountCredentialJSON)
});

const firestore = admin.firestore();

exports.getClientAuthToken = functions.https.onCall((data, context) => {
  let displayClientToken = data.displayToken;
  if (typeof displayClientToken !== 'string') {
    console.log('token is not a string:', displayClientToken);
    return Promise.reject(new functions.https.HttpsError('permission-denied'));
  }

  return firestore.collection('displays').where('clientToken', '==', displayClientToken).limit(2).get().then(displays => {
    if (displays.size === 0) {
      // no display with this token
      console.log('no display found with token', displayClientToken);
      return Promise.reject(new functions.https.HttpsError('permission-denied'));
    }

    if (displays.size === 2) {
      // multiple displays with the same token - should probably move token generation to a function once we care about this
      console.error('more than one display with token', displayClientToken);
      return Promise.reject(new functions.https.HttpsError('permission-denied'));
    }

    let display = displays.docs[0];

    return admin.auth().createCustomToken(`display_user_${display.id}`, {
      displayUser: true,
      displayId: display.id
    }).then(authToken => {
      return {authToken, display: display.id};
    });
  });
})
